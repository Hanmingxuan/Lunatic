plugins {
    id 'java'
    id "xyz.jpenilla.run-paper" version "2.3.1"
}

group = 'org.evlis'
version = '0.3.3'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.21:3.133.1'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.10.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.10.0')
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion("1.21.1")
}
runPaper.folia.registerTask() {
    minecraftVersion("1.20.6")
}

tasks.register("testWithServer") {
    dependsOn("jar") // Ensure the plugin is built

    doLast {
        // Run the Minecraft server using the latest version of your plugin
        tasks.runServer {
            minecraftVersion("1.21.1")
        }

        // Wait for server startup and check log for plugin load confirmation
        File logFile = file("run/logs/latest.log")

        // Poll the log file until it's found (or timeout)
        waitForLogMessage(logFile, "[Lunamatic] Enabling Lunamatic", 30)
    }
}

// Function to poll the log file and check for the plugin load message
def waitForLogMessage(File logFile, String message, int timeoutSeconds) {
    def startTime = System.currentTimeMillis()
    def found = false

    while (System.currentTimeMillis() - startTime < timeoutSeconds * 1000) {
        if (logFile.exists() && logFile.text.contains(message)) {
            found = true
            break
        }
        sleep(1000) // wait for a second and retry
    }

    if (!found) {
        throw new GradleException("Plugin did not load as expected within the timeout period!")
    }
}